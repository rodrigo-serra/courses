body {
  background-color: #bdbdbd;
}

// Container which fills the entire page
.container {
  height: 100vh;
  /*background-color: pink;*/
  display: flex;
  align-items: center;
  justify-content: center;
}

// Variables and functions
$rowsize: 40px;
$numofrows: 14;

$numofcolmns: 9;
$columnsize: 40px;

// # of rows and columns
@function calc-gridsize($value1, $value2) {
  @return $value1 * $value2;
}

$gridheight: calc-gridsize($rowsize, $numofrows);
$gridwidth: calc-gridsize($columnsize, $numofcolmns);

// Grid element. Contains all the other elements
.box {
  border: 5px solid #616161;

  box-shadow: 0px 0px 15px -4px #000000;

  display: grid;
  grid-template-columns: repeat($numofcolmns, $columnsize);
  grid-template-rows: repeat($numofrows, $rowsize);

  // From MagicPatterns
  // https://www.magicpattern.design/tools/css-backgrounds
  background-color: #808080;
  opacity: 1;
  background-image: linear-gradient(
      30deg,
      #303030 12%,
      transparent 12.5%,
      transparent 87%,
      #303030 87.5%,
      #303030
    ),
    linear-gradient(
      150deg,
      #303030 12%,
      transparent 12.5%,
      transparent 87%,
      #303030 87.5%,
      #303030
    ),
    linear-gradient(
      30deg,
      #303030 12%,
      transparent 12.5%,
      transparent 87%,
      #303030 87.5%,
      #303030
    ),
    linear-gradient(
      150deg,
      #303030 12%,
      transparent 12.5%,
      transparent 87%,
      #303030 87.5%,
      #303030
    ),
    linear-gradient(
      60deg,
      #30303077 25%,
      transparent 25.5%,
      transparent 75%,
      #30303077 75%,
      #30303077
    ),
    linear-gradient(
      60deg,
      #30303077 25%,
      transparent 25.5%,
      transparent 75%,
      #30303077 75%,
      #30303077
    );
  background-size: 8px 14px;
  background-position: 0 0, 0 0, 4px 7px, 4px 7px, 0 0, 4px 7px;
}

// Set position of element
@mixin gridposition($cs, $ce, $rs, $re) {
  grid-column-start: $cs;
  grid-column-end: $ce;
  grid-row-start: $rs;
  grid-row-end: $re;
}

// Container for the current state i.e. Session or Break
.state_container {
  width: calc-gridsize($columnsize, 5);
  height: calc-gridsize($rowsize, 1);
  @include gridposition(3, 8, 2, 3);

  background-color: #212121;
  //color: #C62828;
  color: #e0e0e0;

  border-top: 2px solid #616161;
  border-left: 2px solid #616161;
  border-right: 2px solid #616161;

  display: flex;
  align-items: center;
  justify-content: center;

  font-family: "New Tegomin", serif;
  font-size: 32px;
  font-weight: bold;
}
// Little squares to fill the empty spaces around the state_container. Could've done it in a different way
.left_state_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(1, 3, 1, 3);
  background-color: green;
}
.right_state_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(8, 10, 1, 3);
  background-color: orange;
}

// Timer display
.display {
  //width: $gridwidth;
  width: calc-gridsize($columnsize, 5);
  height: calc-gridsize($rowsize, 4);
  @include gridposition(3, 8, 3, 7);

  background-color: #212121;
  //color: #C62828;
  color: #e0e0e0;

  border-left: 2px solid #616161;
  border-bottom: 2px solid #616161;
  border-right: 2px solid #616161;

  display: flex;
  align-items: center;
  justify-content: center;

  font-family: "New Tegomin", serif;
  font-size: 68px;
  font-weight: bold;
}

// Text container for the Break/Session displays
.text_container_break {
  width: calc-gridsize($columnsize, 4);
  height: calc-gridsize($rowsize, 1);
  @include gridposition(1, 5, 7, 8);

  display: flex;
  align-items: center;
  justify-content: center;

  font-family: "New Tegomin", serif;
  font-size: 20px;
  font-weight: bold;

  color: #eeeeee;
  //background-color: green;
}
.text_container_session {
  width: calc-gridsize($columnsize, 4);
  height: calc-gridsize($rowsize, 1);
  @include gridposition(6, 10, 7, 8);

  display: flex;
  align-items: center;
  justify-content: center;

  font-family: "New Tegomin", serif;
  font-size: 20px;
  font-weight: bold;

  color: #eeeeee;
  //background-color: orange;
}

// Displays for the Break/Session variables
.display_break {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 1);
  @include gridposition(2, 4, 8, 9);

  border-radius: 10px;
  border: 2px solid #616161;

  display: flex;
  align-items: center;
  justify-content: center;

  //font-family: 'Roboto', sans-serif;
  font-family: "New Tegomin", serif;
  font-size: 24px;
  font-weight: bold;

  background-color: #212121;
  //color: #C62828;
  color: #e0e0e0;
}
.display_session {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 1);
  @include gridposition(7, 8, 8, 9);

  border-radius: 10px;
  border: 2px solid #616161;

  display: flex;
  align-items: center;
  justify-content: center;

  //font-family: 'Roboto', sans-serif;
  font-family: "New Tegomin", serif;
  font-size: 24px;
  font-weight: bold;

  background-color: #212121;
  //color: #C62828;
  color: #e0e0e0;
}

// Containers for the +/- of Break
.break_add_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(1, 3, 9, 11);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: green;
}
.break_minus_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(3, 5, 9, 11);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: orange;
}
// Containers for the +/- of Session
.session_add_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(6, 8, 9, 11);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: green;
}
.session_minus_container {
  width: calc-gridsize($columnsize, 2);
  height: calc-gridsize($rowsize, 2);
  @include gridposition(8, 10, 9, 11);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: orange;
}
// Buttons for +/-
.my_button {
  width: 50px;
  height: 50px;

  border-radius: 50%;
  border: 2px solid #9e9e9e;

  display: flex;
  align-items: center;
  justify-content: center;

  background-color: #e0e0e0;
  cursor: pointer;
}
.my_button:active {
  transform: scale(0.95);
}

// Containers for the play, pause and restart buttons
// Start and stop button
.start_stop_container {
  width: calc-gridsize($columnsize, 4);
  height: calc-gridsize($rowsize, 3);
  @include gridposition(2, 6, 11, 14);

  display: flex;
  align-items: center;
  justify-content: center;
}
// Restart V2
.restart_container_v2 {
  width: calc-gridsize($columnsize, 3);
  height: calc-gridsize($rowsize, 3);
  @include gridposition(6, 10, 11, 14);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: orange;
}
// For play button (not included)
.play_container {
  width: calc-gridsize($columnsize, 3);
  height: calc-gridsize($rowsize, 3);
  @include gridposition(1, 4, 11, 14);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: green;
}
// For pause button (not included)
.pause_container {
  width: calc-gridsize($columnsize, 3);
  height: calc-gridsize($rowsize, 3);
  @include gridposition(4, 7, 11, 14);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: red;
}
// Restart V1 (not included)
.restart_container {
  width: calc-gridsize($columnsize, 3);
  height: calc-gridsize($rowsize, 3);
  @include gridposition(7, 10, 11, 14);

  display: flex;
  align-items: center;
  justify-content: center;

  //background-color: orange;
}
// Button for play, pause and restart
.my_button_2 {
  width: 100px;
  height: 100px;

  border-radius: 50%;
  border: 2px solid #9e9e9e;

  display: flex;
  align-items: center;
  justify-content: center;

  background-color: #e0e0e0;
  cursor: pointer;
}
.my_button_2:active {
  transform: scale(0.95);
}
